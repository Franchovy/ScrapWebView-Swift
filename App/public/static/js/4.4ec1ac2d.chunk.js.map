{"version":3,"file":"static/js/4.4ec1ac2d.chunk.js","mappings":"w4CAIA,SAASA,WAAWC,EAAuBC,GACzC,IAAIC,EACJ,OAAOC,QAAQC,KAAK,CAClBJ,EACA,IAAIG,SAAQ,SAACE,EAASC,GACpBJ,EAAQK,YAAW,kBAAMD,EAAO,IAAIE,MAAM,oBAAmBP,QAE9DQ,SAAQ,kBAAMC,aAAaR,MAGzB,IAAMS,gBAAb,ioCACE,6OACEC,GADF,EAEEC,UAFF,EAGEC,eAHF,EAIEC,cAJF,EAKEC,eAUAC,QAAQC,IAAI,uBAfd,2CADF,iaAkBE,6OAAgBN,GACdK,QAAQC,IAAI,yBADd,2CAlBF,maAqBE,6OACEN,GADF,EAEEO,OAKAF,QAAQC,IAAI,2BAPd,2CArBF,8ZA8BE,6OAAaN,GACXK,QAAQC,IAAI,sBADd,2CA9BF,8ZAiCE,6OAAaN,GACXK,QAAQC,IAAI,qBADd,2CAjCF,gaAoCE,oPAAeN,GAAf,kBACS,CAAEQ,IAAK,uBADhB,2CApCF,iaAuCE,6OACER,GADF,EAEEQ,IAFF,EAGEC,MAMAJ,QAAQC,IAAI,0BATd,2CAvCF,oaAkDE,6OAAmBN,GACjBK,QAAQC,IAAI,qBADd,2CAlDF,sbAqDE,sWACEN,GADF,MACEA,GACAU,OAFF,MAEEA,OACAC,QAHF,MAGEA,QACAC,OAJF,MAIEA,OAOMC,WACJ,IACAH,OACA,KACAE,OACA,6JAhBJ,iBAkBkCzB,WAAW2B,KAAKD,YAAaF,SAlB/D,2CAkBUI,OAlBV,kBAkBUA,OAAQC,MAlBlB,kBAkBkBA,OAEZA,MApBN,8BAoBmB,IAAIpB,MAAMqB,KAAKC,UAAUF,QApB5C,wCAsBS,CAAED,OAAAA,SAtBX,2DArDF,8cA6EE,oPACEf,GADF,EAEEmB,KAFF,kBAOS,CACLC,OAAQH,KAAKC,UAAU,CACrBC,KAAM,OACNE,MAAO,OACPC,OAAQ,qBACRC,QAAQ,EACRC,UAAU,MAbhB,2CA7EF,maA8FE,6OACExB,GADF,EAEEyB,mBAFF,EAGEjB,IAMAH,QAAQC,IAAI,4BATd,2CA9FF,0EAAqCoB,6CAAAA","sources":["plugins/scrap-webview/web.ts"],"sourcesContent":["import { WebPlugin } from \"@capacitor/core\";\n\nimport type { ScrapWebviewPlugin } from \"./definitions\";\n\nfunction runTimeout(promise: Promise<any>, time: number) {\n  let timer: NodeJS.Timeout;\n  return Promise.race([\n    promise,\n    new Promise((resolve, reject) => {\n      timer = setTimeout(() => reject(new Error(\"Timeout error\")), time);\n    }),\n  ]).finally(() => clearTimeout(timer));\n}\n\nexport class ScrapWebviewWeb extends WebPlugin implements ScrapWebviewPlugin {\n  async create({\n    id,\n    userAgent,\n    persistSession,\n    proxySettings,\n    windowSettings,\n  }: {\n    id: string;\n    userAgent?: string | undefined;\n    persistSession?: boolean | undefined;\n    proxySettings?:\n      | { host: string; port: number; username: string; password: string }\n      | undefined;\n    windowSettings?: { closable: boolean } | undefined;\n  }): Promise<void> {\n    console.log(\"creating webview...\");\n  }\n  async destroy({ id }: { id: string }): Promise<void> {\n    console.log(\"destroying webview...\");\n  }\n  async replaceId({\n    id,\n    new_id,\n  }: {\n    id: string;\n    new_id: string;\n  }): Promise<void> {\n    console.log(\"replacing id webview...\");\n  }\n  async show({ id }: { id: string }): Promise<void> {\n    console.log(\"showing webview...\");\n  }\n  async hide({ id }: { id: string }): Promise<void> {\n    console.log(\"hiding webview...\");\n  }\n  async getUrl({ id }: { id: string }): Promise<{ url: string }> {\n    return { url: \"https://google.com\" };\n  }\n  async loadUrl({\n    id,\n    url,\n    force,\n  }: {\n    id: string;\n    url: string;\n    force: boolean;\n  }): Promise<void> {\n    console.log(\"load url in webview...\");\n  }\n  async reloadPage({ id }: { id: string }): Promise<void> {\n    console.log(\"reload webview...\");\n  }\n  async evaluateScript({\n    id,\n    script,\n    timeout,\n    params,\n  }: {\n    id: string;\n    script: string;\n    timeout: number;\n    params?: string;\n  }): Promise<{ result: string }> {\n    const to_execute =\n      \"(\" +\n      script +\n      \")(\" +\n      params +\n      \").then(result => ({ result })).catch(error => { console.log(error); return { error: { name: error.name, message: error.message, stack: error.stack } }; })\";\n\n    const { result, error } = await runTimeout(eval(to_execute), timeout);\n\n    if (error) throw new Error(JSON.stringify(error));\n\n    return { result };\n  }\n  async getCookie({\n    id,\n    name,\n  }: {\n    id: string;\n    name: string;\n  }): Promise<{ cookie: string }> {\n    return {\n      cookie: JSON.stringify({\n        name: \"TEST\",\n        value: \"TEST\",\n        domain: \"https://google.com\",\n        secure: false,\n        httpOnly: false,\n      }),\n    };\n  }\n  async setCookie({\n    id,\n    cookie_stringified,\n    url,\n  }: {\n    id: string;\n    cookie_stringified: string;\n    url: string;\n  }): Promise<void> {\n    console.log(\"Set cookie in webview...\");\n  }\n}\n"],"names":["runTimeout","promise","time","timer","Promise","race","resolve","reject","setTimeout","Error","finally","clearTimeout","ScrapWebviewWeb","id","userAgent","persistSession","proxySettings","windowSettings","console","log","new_id","url","force","script","timeout","params","to_execute","eval","result","error","JSON","stringify","name","cookie","value","domain","secure","httpOnly","cookie_stringified","WebPlugin"],"sourceRoot":""}